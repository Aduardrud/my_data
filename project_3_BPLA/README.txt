Данный проект представляет собой систему управления миссиями дронов,
которая позволяет выполнять различные типы миссий, таких как обследование территории и орбитальный полет.

Проект состоит из следующих основных компонентов:

1. Классы миссий: Определяют логику выполнения различных типов миссий дронами.
2. Серверный компонент: Обрабатывает запросы на выполнение миссий и управляет состоянием активных миссий.
3. Клиентский компонент: Предоставляет интерфейс для взаимодействия с пользователями и отображения информации о миссиях.
4. Тесты: Включают модульные тесты для проверки функциональности миссий и тесты производительности.

## Файлы

### missions.py
Этот файл содержит определение классов и функций, связанных с выполнением миссий дронами.

Классы:
1. Missions (Абстрактный класс): Определяет общий интерфейс для выполнения миссий.
2. SurveyNavigator: Реализует логику выполнения миссии по обследованию территории в виде квадрата.
3. OrbitNavigator: Реализует логику выполнения миссии по облету области по круговой орбите.
4. Position: Вспомогательный класс для хранения позиции дрона.

Функции:
1. start(): Запускает выполнение миссии.
2. landed(): Осуществляет посадку дрона после завершения миссии.
3. track_orbits(): Отслеживает завершение одного круга при выполнении миссии по орбите.
4. take_snapshot(): Выполняет захват снимка текущей позиции дрона при выполнении миссии по орбите.
5. sign(): Вспомогательная функция для определения знака числа.

### server.py
Этот файл реализует серверную часть приложения, отвечающую за обработку запросов.

Функции:
1. get_system_info(): Возвращает информацию о загрузке системы (CPU, память, диск).
2. register(): Выполняет регистрацию нового пользователя.
3. login(): Выполняет аутентификацию пользователя и возвращает токен доступа.
4. get_users(): Возвращает список всех зарегистрированных пользователей.
5. start_survey_navigator(): Запускает выполнение миссии по обследованию территории.
6. land_survey_navigator(): Выполняет посадку дрона после завершения миссии по обследованию.
7. start_orbit_navigator(): Запускает выполнение миссии по облету области по круговой орбите.
8. land_orbit_navigator(): Выполняет посадку дрона после завершения миссии по облету.
9. handle_auth_error(): Обрабатывает ошибки авторизации, возникающие при отсутствии или недействительности токена доступа.

### Прочие файлы
- client_monitor.html: Содержит HTML-код для клиентского интерфейса, отображающего информацию о миссиях.
- missions_unittest.py: Включает в себя модульные тесты для проверки функциональности, связанной с миссиями.
- efficiency_test.py: Содержит скрипты для тестирования производительности и эффективности различных компонентов проекта.

## Использование
1. Убедитесь, что у вас установлены необходимые зависимости, такие как Flask, Flask-JWT-Extended, Flask-Caching и AirSim.
2. Запустите сервер, выполнив команду:

   python server.py

3. Откройте файл client_monitor.html в веб-браузере, чтобы взаимодействовать с клиентским интерфейсом.

## Тестирование
1. Для запуска модульных тестов, выполните команду:

   python missions_unittest.py

2. Для тестирования эффективности, запустите скрипт:

   python efficiency_test.py


#### Основные эндпоинты

1. **`POST /api/register`**
   - Регистрирует нового пользователя.
   - **Тело запроса**:
     ```json
     {
       "username": "string",
       "password": "string"
     }
     ```
   - **Ответ**:
     - **201**: Пользователь успешно зарегистрирован.
     - **400**: Некорректные данные или пользователь уже существует.

2. **`POST /api/login`**
   - Выполняет вход пользователя и получает токен доступа.
   - **Тело запроса**:
     ```json
     {
       "username": "string",
       "password": "string"
     }
     ```
   - **Ответ**:
     - **200**: Токен доступа и время истечения.
     - **401**: Неверные учетные данные.

3. **`GET /api/users`**
   - Получает список всех зарегистрированных пользователей. Требует JWT-токен в заголовках.
   - **Ответ**:
     - **200**: Список пользователей.

4. **`POST /api/system_info`**
   - Возвращает информацию о системе (использование ЦП, памяти и дискового пространства).
   - **Ответ**:
     - **200**: Информация о системе.

5. **`POST /api/survey_navigator/start`**
   - Запускает миссию обследования.
   - **Тело запроса**:
     ```json
     {
       "boxsize": "number",
       "stripewidth": "number",
       "altitude": "number",
       "velocity": "number"
     }
     ```
   - **Ответ**:
     - **200**: Дрон запущен.

6. **`POST /api/survey_navigator/land`**
   - Останавливает миссию обследования.
   - **Ответ**:
     - **200**: Дрон остановлен.

7. **`POST /api/orbit_navigator/start`**
   - Запускает орбитальную миссию.
   - **Тело запроса**:
     ```json
     {
       "radius": "number",
       "altitude": "number",
       "velocity": "number",
       "iterations": "number",
       "center": ["number", "number"],
       "snapshots": "number"
     }
     ```
   - **Ответ**:
     - **200**: Миссия выполнена.

8. **`POST /api/orbit_navigator/land`**
   - Останавливает орбитальную миссию.
   - **Ответ**:
     - **200**: Дрон остановлен.

## Дополнительная информация
Если у вас есть вопросы или предложения, свяжитесь с нами по адресу: aduardrud@yandex.ru